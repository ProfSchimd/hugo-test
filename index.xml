<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Michele Schimd</title><link>https://profschimd.github.io/hugo-test/</link><description>Recent content on Michele Schimd</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://profschimd.github.io/hugo-test/index.xml" rel="self" type="application/rss+xml"/><item><title>Programmare</title><link>https://profschimd.github.io/hugo-test/materie/inf/3/01-programmazione/00-programmare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/inf/3/01-programmazione/00-programmare/</guid><description>Cosa vuol dire programmare</description></item><item><title>Sistema di elaborazione</title><link>https://profschimd.github.io/hugo-test/materie/sr/3/01/sistema_elaborazione/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/sr/3/01/sistema_elaborazione/</guid><description>I sistemi di elaborazione sono quei dispositivi che sono in grado di elaborare dati. Spesso questi possono essere programmati per fare delle specifiche elaborazioni.</description></item><item><title>Istruzioni</title><link>https://profschimd.github.io/hugo-test/materie/inf/3/01-programmazione/01-istruzioni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/inf/3/01-programmazione/01-istruzioni/</guid><description/></item><item><title>La comunicazione</title><link>https://profschimd.github.io/hugo-test/materie/sr/4/01-base-reti/comunicazione/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/sr/4/01-base-reti/comunicazione/</guid><description>Per capire bene come funziona una rete, bisogna prima capire a cosa serve una rete.
Nell&amp;rsquo;esempio di comunicazione rappresentato nella figura di sinistra, ci sono due persone che vogliono scambiarsi dell&amp;rsquo;informazione. Alice vuole che Bob le mandi l&amp;rsquo;ultimo versione del documento su cui lui sta lavorando. Bob è in smart working per la pandemia e manderà ad Alice una copia elettronica del documento richiesto. Notiamo che quando Alice chiede via email il documento a Bob, Alice spedisce e Bob riceve.</description></item><item><title>Random Access Memory (RAM)</title><link>https://profschimd.github.io/hugo-test/materie/sr/3/01/ram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/sr/3/01/ram/</guid><description>Come è fatta la RAM La memoria RAM si può pensare come una lunga lista di bytes. Ad esempio un computer con 8 GigaByte di RAM avrà 8,589,934,596 (circa 8 miliardi) celle di memoria, ognuna contenente un byte cioè 8 bit.
Attenzione In informatica Giga significa \( 2^{20} \) (2 alla 20) e non \( 10^9 \) (10 alla 9) come, ad esempio, in fisica 3 GHz = 3,000,000,000 Hz).</description></item><item><title>Architettura a strati per le reti</title><link>https://profschimd.github.io/hugo-test/materie/sr/4/01-base-reti/architettura-rete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/sr/4/01-base-reti/architettura-rete/</guid><description>Modelli a strati Una rete come Internet è un artificio umano estremamente complesso. Si stima che ci siano più di 20 miliardi di dispositivi connessi alla rete (quanti dei vostri dispositivi - PC, smartphone, PS5, &amp;hellip; - sono connessi ad Internet?).
Rifletti Quanti e quali dispositivi sono connessi? Scrivi una risposta e solo dopo clicca qui e rifletti sulla tua risposta. Aggiungeresti qualcosa alla lista dei tuoi dispositivi connessi?
Per gestire un sistema così complesso le reti moderne come Internet sono costruite basandosi su architetture a strati (layered architecture).</description></item><item><title>Central Processing Unit (CPU)</title><link>https://profschimd.github.io/hugo-test/materie/sr/3/01/cpu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/sr/3/01/cpu/</guid><description>Central Processing Unit (CPU) La CPU (Central Processing Unit - unità centrale di elaborazione) rappresenta il &amp;ldquo;cervello&amp;rdquo; di un calcolatore in quanto esegue le istruzioni che compongono un programma. Tali istruzioni sono molto semplice come: sommare due numeri, memorizza un numero in memoria, leggi un carattere dalla tastiera, &amp;hellip;
L&amp;rsquo;insieme delle istruzioni che una CPU è in grado di eseguire viene detto Instruction Set Architecture ISA e dipende dal modo in cui la CPU è organizzata internamente.</description></item><item><title>Variabili</title><link>https://profschimd.github.io/hugo-test/materie/inf/3/01-programmazione/02-variabili/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/inf/3/01-programmazione/02-variabili/</guid><description/></item><item><title>Condizioni e salti</title><link>https://profschimd.github.io/hugo-test/materie/inf/3/01-programmazione/03-condizioni-salti/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/inf/3/01-programmazione/03-condizioni-salti/</guid><description>Condizioni: if-then-else Attenzione al codice replicato Le condizioni if sono indispensabili per eseguire codice diverso in base a delle condizioni quale, ad esempio, il valore di una variabile. Perciò si può scrivere a schermo una frase al singolare
È rimasto un solo posto, affrettati a prenotare! in caso in cui, ad esempio su un volo, sia rimasto l&amp;rsquo;ultimo posto disponibile mentre si usano frasi diverse in situazioni diverse.
Un bravo programmatore deve identificare tutte e sole quelle istruzioni che cambiano sulla base della condizione.</description></item><item><title>Protocolli di rete</title><link>https://profschimd.github.io/hugo-test/materie/sr/4/01-base-reti/protocolli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/sr/4/01-base-reti/protocolli/</guid><description>Definizione: Protocollo Un protocollo di rete è un insieme di regole che determinano il modo in cui avviene una comunicazione tra due software. I protocolli sono usati da software che si posizionano allo stesso livello del modello di riferimento.
La definizione appena data presenta diversi aspetti da capire.
Insieme di regole proprio come nella comunicazione tra persone, è necessario che si stabiliscano delle regole perché questa comunicazione possa avvenire. Le regole si stabiliscono per garantire diversi requisiti due persone devono in una lingua comprensibile ad entrambi; se &amp;ldquo;distanti&amp;rdquo; le due persone devono utilizzare opportuni mezzi; due persone non dovrebbero parlare contemporaneamente; se la conversazione è riservata e remota, bisogna essere sicuri dell&amp;rsquo;identità interlocutore Comunicazione come visto sopra, lo scopo è, solitamente quello di effettuare una comunicazione, vale a dire uno scambio di informazioni.</description></item><item><title>Livello applicativo</title><link>https://profschimd.github.io/hugo-test/materie/sr/5/01-application/livello-applicativo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/sr/5/01-application/livello-applicativo/</guid><description>Il livello applicativo (application layer) è l&amp;rsquo;ultimo (settimo) livello dell&amp;rsquo;architettura ISO/OSI. Il suo ruolo è quello di fornire i servizi necessari alla realizzazione di un&amp;rsquo;applicazione di rete quali posta, World Wide Web, streaming e molte altro.
La quantità di protocolli del livello applicativo è vastissima ed è praticamente impossibile discuterli tutti. Alcuni di questi protocolli, tuttavia, ricoprono un ruolo fondamentale nell&amp;rsquo;utilizzo di Internet ed è quindi importante conoscerne i dettagli. In particolare, sono di fondamentale importanza i seguenti protocolli del livello applicativo.</description></item><item><title>Progetto e Gestione Progetto</title><link>https://profschimd.github.io/hugo-test/materie/gpoi/5/03/project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/gpoi/5/03/project/</guid><description>Questa lezione tratta i concetti base del project management (in italiano gestione progetto) approfondendo il concetto di progetto, la differenza tra progetto e processo ed il concetto di gestione del progetto.
Consultando questa mappa concettuale si può vedere come il concetto di progetto sia definito e collegato ad altri concetti fondamentali. Le lezioni di questo modulo (di cui questa è la prima) cercano di spiegare gli aspetti più importanti mostrati nella mappa.</description></item><item><title>Laboratorio: livelli di rete e programmazione</title><link>https://profschimd.github.io/hugo-test/materie/sr/4/01-base-reti/lab01-program-livelli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/sr/4/01-base-reti/lab01-program-livelli/</guid><description>Uno dei vantaggi dei vantaggi di un&amp;rsquo;architettura di rete stratificata è la modularità che ne deriva. Infatti, ogni livello può essere realizzato com un modulo a sé, l&amp;rsquo;importante è che si realizzino i corretti Service Access Point (SAP). Per comprendere meglio questo aspetto, in questo laboratorio si procede alla stesura di una piccola architettura di rete basata su due soli livelli. Negli esempi verrà utilizzato il linguaggio Python, ma è possibile, ma qualsiasi linguaggio ad alto livello può essere utilizzato, va tenuto in considerazione, tuttavia, che ogni linguaggio presenta nei modi specifici per realizzare alcuni concetti della programmazione (esempio: interfacce, classi astratte, protocolli, &amp;hellip;).</description></item><item><title>Domain Name System (DNS)</title><link>https://profschimd.github.io/hugo-test/materie/sr/5/01-application/dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/sr/5/01-application/dns/</guid><description/></item><item><title>Protocollo HTTP</title><link>https://profschimd.github.io/hugo-test/materie/sr/5/01-application/http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/sr/5/01-application/http/</guid><description/></item><item><title>Protocollo FTP</title><link>https://profschimd.github.io/hugo-test/materie/sr/5/01-application/ftp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/sr/5/01-application/ftp/</guid><description/></item><item><title>Posta elettronica (SMTP, POP3, IMAP)</title><link>https://profschimd.github.io/hugo-test/materie/sr/5/01-application/protocolli-posta/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/sr/5/01-application/protocolli-posta/</guid><description/></item><item><title>Altri protocolli di livello applicativo</title><link>https://profschimd.github.io/hugo-test/materie/sr/5/01-application/altri-protocolli-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/sr/5/01-application/altri-protocolli-app/</guid><description>Telnet Dynamic Host Configuration Protocol (DHCP)</description></item><item><title>Laboratorio: Server su macchina virtuale</title><link>https://profschimd.github.io/hugo-test/materie/sr/5/01-application/l01-vm-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/sr/5/01-application/l01-vm-server/</guid><description>In questo laboratorio si installeranno diversi server su macchina virtuale Linux.</description></item><item><title>3IC</title><link>https://profschimd.github.io/hugo-test/classi/3ic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/classi/3ic/</guid><description/></item><item><title>3IC (AS 2021-2022)</title><link>https://profschimd.github.io/hugo-test/classi/anni-passati/classi-as-2021-2022/3ic-2021-2022/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/classi/anni-passati/classi-as-2021-2022/3ic-2021-2022/</guid><description/></item><item><title>4IC</title><link>https://profschimd.github.io/hugo-test/classi/4ic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/classi/4ic/</guid><description/></item><item><title>4IC (AS 2021-2022)</title><link>https://profschimd.github.io/hugo-test/classi/anni-passati/classi-as-2021-2022/4ic-2021-2022/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/classi/anni-passati/classi-as-2021-2022/4ic-2021-2022/</guid><description/></item><item><title>4ID</title><link>https://profschimd.github.io/hugo-test/classi/4id/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/classi/4id/</guid><description/></item><item><title>4ID (AS 2021-2022)</title><link>https://profschimd.github.io/hugo-test/classi/anni-passati/classi-as-2021-2022/4id-2021-2022/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/classi/anni-passati/classi-as-2021-2022/4id-2021-2022/</guid><description/></item><item><title>5IA</title><link>https://profschimd.github.io/hugo-test/classi/5ia/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/classi/5ia/</guid><description/></item><item><title>5IA (AS 2021-2022)</title><link>https://profschimd.github.io/hugo-test/classi/anni-passati/classi-as-2021-2022/5ia-2021-2022/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/classi/anni-passati/classi-as-2021-2022/5ia-2021-2022/</guid><description/></item><item><title>5IC</title><link>https://profschimd.github.io/hugo-test/classi/5ic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/classi/5ic/</guid><description/></item><item><title>5IC (AS 2021-2022)</title><link>https://profschimd.github.io/hugo-test/classi/anni-passati/classi-as-2021-2022/5ic-2021-2022/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/classi/anni-passati/classi-as-2021-2022/5ic-2021-2022/</guid><description/></item><item><title>About</title><link>https://profschimd.github.io/hugo-test/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/about/</guid><description>Questo sito contiene materiale didattico predisposto per gli alunni dell&amp;rsquo;ITIS Carlo Zuccante di Venezia-Mestre.
Il materiale prodotto, quindi, va utilizzato esclusivamente a scopi didattici e non rappresenta documentazione o guida ufficiale ad i tool, linguaggi ed in generale agli argomenti trattati.
Alcuni link utili:
GitHub ProfSchimd Vecchio sito materiale Registro Elettronico Sito Ufficiale ITIS Carlo Zuccante Sito Orientamento ITIS Zuccante</description></item><item><title>Load and Store</title><link>https://profschimd.github.io/hugo-test/materie/sr/3/02/load-store/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/sr/3/02/load-store/</guid><description>Leggere e scrivere la RAM Un programma non potrebbe fare molto senza utilizzare la memoria RAM per tanti motivi:
le istruzioni sono nella RAM; i dati sono nella RAM; i risultati vengono scritti nella RAM; &amp;hellip; Serve quindi un modo per poter leggere e scrivere dalla RAM. Le istruzioni assembly che fanno queste operazioni sono
LOAD (LD) legge dati dalla RAM e li scrivi nei registri STORE (ST) scrive dati nella RAM prendendoli dai registri Architetture Load-Store Alcune architetture di processori vengono dette Load-Store perché non permettono solo questo tipo di operazioni con la RAM.</description></item><item><title>Processi e Thread</title><link>https://profschimd.github.io/hugo-test/materie/tpsit/4/01-processi-thread/processi-e-thread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/tpsit/4/01-processi-thread/processi-e-thread/</guid><description>Processi e thread</description></item><item><title>Python quiz</title><link>https://profschimd.github.io/hugo-test/materie/python/02-primi-passi/quiz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/python/02-primi-passi/quiz/</guid><description/></item></channel></rss>