<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Michele Schimd</title><link>https://profschimd.github.io/hugo-test/</link><description>Recent content on Michele Schimd</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://profschimd.github.io/hugo-test/index.xml" rel="self" type="application/rss+xml"/><item><title>Progetto e Gestione Progetto</title><link>https://profschimd.github.io/hugo-test/materie/gpoi/5/03/project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/gpoi/5/03/project/</guid><description>Questa lezione tratta i concetti base del project management (in italiano gestione progetto) approfondendo il concetto di progetto, la differenza tra progetto e processo ed il concetto di gestione del progetto.
Consultando questa mappa concettuale si può vedere come il concetto di progetto sia definito e collegato ad altri concetti fondamentali. Le lezioni di questo modulo (di cui questa è la prima) cercano di spiegare gli aspetti più importanti mostrati nella mappa.</description></item><item><title>3IC</title><link>https://profschimd.github.io/hugo-test/classi/3ic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/classi/3ic/</guid><description/></item><item><title>4IC</title><link>https://profschimd.github.io/hugo-test/classi/4ic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/classi/4ic/</guid><description/></item><item><title>4ID</title><link>https://profschimd.github.io/hugo-test/classi/4id/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/classi/4id/</guid><description/></item><item><title>5IA</title><link>https://profschimd.github.io/hugo-test/classi/5ia/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/classi/5ia/</guid><description/></item><item><title>5IC</title><link>https://profschimd.github.io/hugo-test/classi/5ic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/classi/5ic/</guid><description/></item><item><title>About</title><link>https://profschimd.github.io/hugo-test/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/about/</guid><description>Questo sito contiene materiale didattico predisposto per gli alunni dell&amp;rsquo;ITIS Carlo Zuccante di Venezia-Mestre.
Il materiale prodotto, quindi, va utilizzato esclusivamente a scopi didattici e non rappresenta documentazione o guida ufficiale ad i tool, linguaggi ed in generale agli argomenti trattati.
Alcuni link utili:
GitHub ProfSchimd Vecchio sito materiale Registro Elettronico Sito Ufficiale ITIS Carlo Zuccante Sito Orientamento ITIS Zuccante</description></item><item><title>CPU</title><link>https://profschimd.github.io/hugo-test/materie/sr/3/01/cpu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/sr/3/01/cpu/</guid><description>Central Processing Unit (CPU) La CPU (Central Processing Unit - unità centrale di elaborazione) rappresenta il &amp;ldquo;cervello&amp;rdquo; di un calcolatore in quanto esegue le istruzioni che compongono un programma. Tali istruzioni sono molto semplice come: sommare due numeri, memorizza un numero in memoria, leggi un carattere dalla tastiera, &amp;hellip;
L&amp;rsquo;insieme delle istruzioni che una CPU è in grado di eseguire viene detto Instruction Set Architecture ISA e dipende dal modo in cui la CPU è organizzata internamente.</description></item><item><title>Load and Store</title><link>https://profschimd.github.io/hugo-test/materie/sr/3/02/load-store/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/sr/3/02/load-store/</guid><description>Leggere e scrivere la RAM Un programma non potrebbe fare molto senza utilizzare la memoria RAM per tanti motivi:
le istruzioni sono nella RAM; i dati sono nella RAM; i risultati vengono scritti nella RAM; &amp;hellip; Serve quindi un modo per poter leggere e scrivere dalla RAM. Le istruzioni assembly che fanno queste operazioni sono
LOAD (LD) legge dati dalla RAM e li scrivi nei registri STORE (ST) scrive dati nella RAM prendendoli dai registri Architetture Load-Store Alcune architetture di processori vengono dette Load-Store perché non permettono solo questo tipo di operazioni con la RAM.</description></item><item><title>Python quiz</title><link>https://profschimd.github.io/hugo-test/materie/python/02-primi-passi/quiz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/python/02-primi-passi/quiz/</guid><description> quizStart('../PY.02.Q.json', 'quiz-content');</description></item><item><title>RAM</title><link>https://profschimd.github.io/hugo-test/materie/sr/3/01/ram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/hugo-test/materie/sr/3/01/ram/</guid><description/></item></channel></rss>